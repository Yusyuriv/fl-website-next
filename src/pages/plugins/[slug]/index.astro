---
import {getCollection, getEntry, render} from "astro:content";
import {GET} from "@/pages/plugins.json";
import Layout from "@/layouts/Layout.astro";
import Section from "@/components/Section.astro";
import SectionHeader from "@/components/SectionHeader.astro";
import {formatDate} from "@/utils";
import Tags from "@/components/plugins/Tags.astro";
import LabelValue from "@/components/plugins/LabelValue.astro";
import path from "node:path";
import process from "node:process";
import {type LocalImageProps, Picture} from "astro:assets";
import Swiper from "@/components/Swiper.astro";
import YouTubeEmbed from "@/components/YouTubeEmbed.astro";
import BlogArticleCard from "@/components/blog/BlogArticleCard.astro";
import {ExtendedPlugin} from "@/pages/plugins/_types";

export {getStaticPaths} from "@/pages/plugins/[slug]/_static-paths";

interface Props {
  plugin: ExtendedPlugin;
}

const {slug} = Astro.params;
const {plugin} = Astro.props;

const title = `${plugin.name} | Flow Launcher Plugin`;
const description = plugin.description;

const pluginContent = await getEntry("plugins", slug);
const {Content} = pluginContent ? await render(pluginContent) : {Content: null};

const pluginLanguage = plugin.language.toLowerCase();
let pluginType = "";
if (pluginLanguage === "javascript" || pluginLanguage === "javascript_v2") {
  pluginType = "JavaScript";
} else if (pluginLanguage === "typescript" || pluginLanguage === "typescript_v2") {
  pluginType = "TypeScript";
} else if (pluginLanguage === "python" || pluginLanguage === "python_v2") {
  pluginType = "Python";
} else if (pluginLanguage === "executable" || pluginLanguage === "executable_v2") {
  pluginType = "Executable";
} else if (pluginLanguage === "csharp") {
  pluginType = "C#";
} else if (pluginLanguage === "fsharp") {
  pluginType = "F#";
}

const sourceCodeLabel = plugin.sourceCodeUrl.startsWith("https://github.com/") ? "GitHub" : "Source Code";

let carousel: ({youtube: string} | {image: LocalImageProps | Promise<LocalImageProps>})[] = [];
if (pluginContent?.data?.carousel) {
  carousel = pluginContent.data.carousel.map(v => {
    if (v.startsWith("http:") || v.startsWith("https:")) {
      return { youtube: v };
    }
    const filePath = path.join(process.cwd(), pluginContent.filePath, "..", v);
    return { image: import(filePath) };
  }).filter(v => !!v);
}

const pluginBlog = await getCollection("pluginBlog", v => v.data.id === plugin.id);
const hasMoreThanTwoPosts = pluginBlog.length > 2;
const latestPosts = pluginBlog.slice(0, 2).map(v => v.data);
const viewAllBlogPostsLink = `/plugins/${plugin.slug}/blog`;
---
<Layout {title} {description}>
  <Section>
    <div class="plugin-title">
      <img src={plugin.icon} alt="" class="icon"/>

      <div>
        <SectionHeader>{plugin.name}</SectionHeader>
        <p class="author">by {plugin.author}</p>
      </div>
    </div>

    <Swiper noLoop class="swiper-outer">
      {carousel.map(v => 'youtube' in v
        ? <div class="swiper-slide"><YouTubeEmbed video={v.youtube} fullWidth/></div>
        : <div class="swiper-slide"><Picture alt="" src={v.image} formats={["avif", "webp"]}/></div>
      )}
    </Swiper>
  </Section>

  <Section even containerClass="blog-content blog-grid">
    <div>
      {Content ?
        <Content/> : plugin.description}
    </div>

    <aside class="plugin-info">
      <LabelValue label="Version" value={plugin.version}/>
      <LabelValue label="Plugin type" value={pluginType}/>
      <LabelValue label="Latest release date" value={formatDate(plugin.latestReleaseDate)}/>
      <LabelValue label="Source Code">
        <a href={plugin.sourceCodeUrl}>{sourceCodeLabel}</a>
      </LabelValue>
      <LabelValue label="Categories">
        <Tags tags={plugin.tags}/>
      </LabelValue>
      {latestPosts.length > 0 ?
        <LabelValue label="Latest blog posts">
          {latestPosts.map(post => (
            <BlogArticleCard
              date={post.date}
              slug={post.slug}
              summary={post.summary}
              title={post.title}
              pluginSlug={plugin.slug}
            />
          ))}
          {!hasMoreThanTwoPosts ?
            <a href={viewAllBlogPostsLink} class="view-all-blog-posts">View all blog posts</a>
            : null}
        </LabelValue>
        : null}
    </aside>
  </Section>
</Layout>

<style>
.plugin-title {
    display: flex;
    gap: 20px;
    align-items: center;
}

.icon {
    width: 64px;
    height: 64px;
    object-fit: contain;
}

.author {
    color: var(--muted-text);
}

.blog-grid {
    display: grid;
    grid-template-columns: 1fr 300px;
    gap: 20px;
}

.plugin-info {
    display: flex;
    flex-direction: column;
    gap: 16px;
}

.swiper-outer {
    margin-top: 20px;
}

.swiper-slide {
    height: 100% !important;
}

.swiper-slide img,
.swiper-slide iframe {
    width: 100%;
    height: auto;
    aspect-ratio: 16 / 9;
    object-fit: contain;
}

.view-all-blog-posts {
    margin-top: 10px;
    display: block;
    text-align: right;
}
</style>
